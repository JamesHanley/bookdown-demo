n.times = 45 ; prob.per.time = 0.03 ; N.SIMS = 100#
sims = matrix(sample(c("+","-"),#
                     size=N.SIMS*n.times,#
                     prob=c(prob.per.time,1-prob.per.time),#
                     replace=TRUE),#
              N.SIMS, n.times) # N.SIMS rows, n.times columns#
noquote(apply(sims[1:10,],1,paste,collapse=""))#
str(sims)#
#
positive = apply(sims=="+",1,any)  # applies the 'any' function to each row#
str(positive)#
proportion.of.sims.with.a.hit = mean(positive)#
num = sum(positive) #
#
cat(paste("Proportion.of.sims.with.a.hit: ",toString(num),"/",toString(N.SIMS)," = ",toString(proportion.of.sims.with.a.hit),";\nfor a more stable estimate, use a larger N.SIMS",sep=""))
year=c(0.8+(1981:1984),0.8+(1986:1988),#
       1989.4,1989.8,0.4+(1990:1992),1993.8)#
n = c(27,37,33,20,21,19,39,31,31,52,43,49,32)#
summary(n)#
at.least.one.duplicate.birthday =#
   c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,#
     FALSE,TRUE,TRUE,TRUE,TRUE) #
cbind(year,n,at.least.one.duplicate.birthday)#
sum(at.least.one.duplicate.birthday)#
#
cat("n's in the classes without a duplicate:")
prob.all.different = cumprod( (365:1) / rep(365,365) )
prob.all.different
prob.all.different = round(prob.all.different[n],2)
prob.all.different
prob.at.least.1.duplicate = 1 - prob.all.different
cbind(n,prob.all.different,prob.at.least.1.duplicate)

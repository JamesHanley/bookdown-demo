str(ds)
head(ds)
write.table(ds,"weightsEtc.txt")
ds = read.table("http://www.biostat.mcgill.ca/hanley/statbook/weightsEtc.txt")#
#
MEAN=round(weighted.mean(ds$Weight.lbs,w=ds$Freq))#
#
VAR = sum( ds$Freq * (ds$Weight.lbs-MEAN)^2 ) / sum(ds$Freq)#
#
SD = sqrt(VAR)
SD
WEIGHTS = sort(unique(ds$Weight.lbs))#
Freq = aggregate(ds$Freq,by=list(ds$Weight.lbs),sum)$x#
Proportions = Freq/sum(Freq)#
#
W.50 = WEIGHTS[min(which(cumsum(Proportions) > 0.50))]#
mu = sum(WEIGHTS*Proportions)
no.of.sims = 10000 ;  # no. of samples of each size#
                      # enough to generate relatively smooth histograms  #
sample.sizes = c(1,2,4,8,16) ; #
#
par(mfrow=c(length(sample.sizes),1),mar = c(0.5,1,0.5,1) )#
#
for (n in sample.sizes ){        # loop over the various sample sizes#
   weights = matrix(sample(WEIGHTS,    # 1 row per simulation#
              size = n*no.of.sims,     # to save time, do all at once#
              replace = TRUE,          # only because data compressed#
              prob = Proportions),     # = FALSE if has indiv. data#
          nrow = no.of.sims, ncol=n) # put into rows / columns#
   if(n > 1 & n <= 10){#
     print( noquote(#
      paste("Weights (lbs) of sampled persons in first 2 samples of size",  #
            toString(n)) )   ) #
     print(head(weights,2))#
   }#
   if( n == max(sample.sizes) ){#
     cat("The first panel shows the weight-distribution of the entire population.\n")#
     cat("The remaining ones show the  distributions of the sample sums and means.\n")#
     message("test")#
   } #
   # compute the row-specific (simulation-specific) sums and means#
   # apply sum/mean to MARGIN=1, i.e., to each simulation (each row)#
#
   sums.samples.of.size.n = apply(weights,MARGIN=1,FUN=sum)#
   means.samples.of.size.n = apply(weights,MARGIN=1,FUN=mean)#
#
   fr = table(sums.samples.of.size.n)          # fr = frequency#
   Y = max(Proportions*no.of.sims)/sqrt(0.75*n) # scale the y axis#
   plot(fr,lw=0.4,xlim=c(n*100,n*(max(WEIGHTS)+50) ), #
                  ylim=c(-0.25,1)*Y, xaxt="n")#
   text(n*320,0.55*Y,paste("n =",toString(n)),cex=2,font=3,adj=c(0,1))#
   for(w in seq(100,300,20)) {#
     text(n*w, -0.01*Y, toString(n*w),adj=c(0.5,1),cex=1.5)#
     txts = paste("Sum of",toString(n),"Weights")#
     if(n==1) txts = "Individual Weights"#
     if(w==300 ) text(n*310, -0.01*Y,#
          txts,adj=c(0,1),cex=1.5)#
     if(n > 1) text(n*w, -0.15*Y, toString(w),adj=c(0.5,1),font=4,cex=1.5)#
     if(w==300 & n > 1) text(n*310, -0.15*Y,#
          paste("Mean of",toString(n)," Weights"),adj=c(0,1),font=4,cex=1.5)#
   }#
   # how big is the spread (sd) of the simulated sums and means ?#
   sd.sums  = round( sd(sums.samples.of.size.n), 1 )#
   sd.means = round( sd(means.samples.of.size.n),1 )#
   txt.s = paste( "SD of Sum:", toString(sd.sums) )#
   if(n==1) txt.s = paste("SD of Individual Weights:",toString(sd.sums),"(lbs)" )#
   txt.m = paste("\n\n  SD of Mean:",toString(sd.means))#
   if(n==1) txt.m = "\n\n "#
   text(n*mu +  sd.sums,Y*0.7,#
        paste(txt.s,txt.m), cex=1.5,adj=c(0,0.5) )#
   points(n*mu,0,pch=19,col="red",cex=1.5)#
   if(n==1){#
     text(W.50-1,0.95*Y,"50% <- | -> 50%",adj=c(0.5,1),cex=1.5,col="blue")#
     segments(W.50-0.1,0.95*Y, W.50-0.1,0,col="blue")#
     text(352,-0.175*Y,#
       "Reported Weights, US Adults, 2014-2018",#
       adj=c(1,1),cex=1.25)#
   } #
}
WEIGHTS = sort(unique(ds$Weight.lbs))#
table(ds$Weight.lbs,ds$Sex)
Freq = aggregate(ds$Freq,by=list(sex=ds$Sex,w=ds$Weight.lbs),sum)
Freq
?by
by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
fr = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
str(fr)
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
Freq
str(proportions)
Proportions = Freq
str(proportions)
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
Proportions = Freq
str(proportions)
str(Proportions)
apply(Freq,1,sum)
apply(Freq,2,sum)
dim(Freq)
totals = matrix(apply(Freq,2,sum),dim(Freq))
totals
totals = matrix(apply(Freq,2,sum),dim(Freq)[1],dim(Freq)[2])
totals
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
Freq
apply(Freq,2,sum)
rep(apply(Freq,2,sum), dim(Freq)[1])
rep(apply(Freq,2,sum), each=dim(Freq)[1])
matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[1],dim(Freq)[2])
Freq / totals
Freq = Freq / totals
Freq
Proportions = Freq / totals
str(Proportions)
apply(Proportions,2,sum)
apply(Proportions,1,sum)
totals = matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[2],dim(Freq)[1])
Proportions = Freq / totals
str(Proportions)
totals = matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[1],dim(Freq)[2])
totals
as.matrix(Freq)
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
Freq = matrix( Freq,dim(Freq)[1],dim(Freq)[2])
Freq
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)#
totals = matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[1],dim(Freq)[2])#
Freq = matrix( Freq,dim(Freq)[1],dim(Freq)[2])#
Proportions = Freq / totals#
str(Proportions)
apply(Proportions,2,sum)
Proportions
apply(Proportions,2,sum)
no.of.sims = 10000
sex = sample[c(1,2),no.of.sims,replace=TRUE)
sex = sample(c(1,2),no.of.sims,replace=TRUE)
sex
WEIGHTS = sort(unique(ds$Weight.lbs))
WEIGHTS
no.of.sims = 10000 ;  # no. of samples of each size#
                      # enough to generate relatively smooth histograms  #
sample.sizes = c(1,2,4,8,16) ;
n=5
sex = sample(c(1,2),no.of.sims,replace=TRUE)
weights = matrix(sample(WEIGHTS,      # 1 row per simulation#
              size = n*no.of.sims,       # to save time, do all at once#
              replace = TRUE,            # only because data compressed#
              prob = Proportions[,sex]), # = FALSE if has indiv. data#
          nrow = no.of.sims, ncol=n) # put into rows / columns
sex
Proportions[,sex]
?rbinom
totals
apply(Freq,2,sum)
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)#
totals = matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[1],dim(Freq)[2])#
Freq = matrix( Freq,dim(Freq)[1],dim(Freq)[2])#
Proportions = Freq / totals#
WEIGHTS = sort(unique(ds$Weight.lbs))#
#
apply(Freq,2,sum)
n.each = apply(Freq,2,sum)
?rbinom
n.each = apply(Freq,2,sum)
p.each = n.each / sum(n.each)
p.each
no.of.sims
s1 = rbinom(1,no.of.sims,prob=p.each[1])
s1
Proportions[,1]
weights = matrix(NA,nrow = no.of.sims, ncol=n)
n
s1 = rbinom(1,no.of.sims,prob=p.each[1])
weights = matrix(sample(WEIGHTS,      # 1 row per simulation#
              size    = n*s1,            # to save time, do all at once#
              replace = TRUE,            # only because data compressed#
              prob = Proportions[,1]),   # = FALSE if has indiv. data#
             nrow = s1, ncol=n)
weights
w1      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s1,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,1]),   # = FALSE if has indiv. data#
             nrow = s1, ncol=n)
w2      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s2,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,1]),   # = FALSE if has indiv. data#
             nrow = s2, ncol=n)          # put into rows / columns
s1
s2
s2 = no.of.sims - s1
s2
w2      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s2,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,2]),   # = FALSE if has indiv. data#
             nrow = s2, ncol=n)
weights = rbind(w1,w2)
str(weights)
no.of.sims = 1000 ;  # no. of samples of each size#
                      # enough to generate relatively smooth histograms  #
sample.sizes = c(1,2,4,8,16) ; #
#
par(mfrow=c(length(sample.sizes),1),mar = c(0.5,1,0.5,1) )#
#
for (n in sample.sizes ){        # loop over the various sample sizes#
   s1 = rbinom(1,no.of.sims,prob=p.each[1])#
   w1      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s1,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,1]),   # = FALSE if has indiv. data#
             nrow = s1, ncol=n)          # put into rows / columns#
   s2 = no.of.sims - s1#
   w2      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s2,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,2]),   # = FALSE if has indiv. data#
             nrow = s2, ncol=n)          # put into rows / columns#
   weights = rbind(w1,w2)#
   str(weights)     #
   if(n > 1 & n <= 10){#
     print( noquote(#
      paste("Weights (lbs) of sampled persons in first 2 samples of size",  #
            toString(n)) )   ) #
     print(head(weights,2))#
   }#
   if( n == max(sample.sizes) ){#
     cat("The first panel shows the weight-distribution of the entire population.\n")#
     cat("The remaining ones show the  distributions of the sample sums and means.\n")#
     message("test")#
   } #
   # compute the row-specific (simulation-specific) sums and means#
   # apply sum/mean to MARGIN=1, i.e., to each simulation (each row)#
#
   sums.samples.of.size.n = apply(weights,MARGIN=1,FUN=sum)#
   means.samples.of.size.n = apply(weights,MARGIN=1,FUN=mean)#
#
   fr = table(sums.samples.of.size.n)          # fr = frequency#
   Y = max(Proportions*no.of.sims)/sqrt(0.75*n) # scale the y axis#
   plot(fr,lw=0.4,xlim=c(n*100,n*(max(WEIGHTS)+50) ), #
                  ylim=c(-0.25,1)*Y, xaxt="n")#
   text(n*320,0.55*Y,paste("n =",toString(n)),cex=2,font=3,adj=c(0,1))#
   for(w in seq(100,300,20)) {#
     text(n*w, -0.01*Y, toString(n*w),adj=c(0.5,1),cex=1.5)#
     txts = paste("Sum of",toString(n),"Weights")#
     if(n==1) txts = "Individual Weights"#
     if(w==300 ) text(n*310, -0.01*Y,#
          txts,adj=c(0,1),cex=1.5)#
     if(n > 1) text(n*w, -0.15*Y, toString(w),adj=c(0.5,1),font=4,cex=1.5)#
     if(w==300 & n > 1) text(n*310, -0.15*Y,#
          paste("Mean of",toString(n)," Weights"),adj=c(0,1),font=4,cex=1.5)#
   }#
   # how big is the spread (sd) of the simulated sums and means ?#
   sd.sums  = round( sd(sums.samples.of.size.n), 1 )#
   sd.means = round( sd(means.samples.of.size.n),1 )#
   txt.s = paste( "SD of Sum:", toString(sd.sums) )#
   if(n==1) txt.s = paste("SD of Individual Weights:",toString(sd.sums),"(lbs)" )#
   txt.m = paste("\n\n  SD of Mean:",toString(sd.means))#
   if(n==1) txt.m = "\n\n "#
   text(n*mu +  sd.sums,Y*0.7,#
        paste(txt.s,txt.m), cex=1.5,adj=c(0,0.5) )#
   points(n*mu,0,pch=19,col="red",cex=1.5)#
   if(n==1){#
     text(W.50-1,0.95*Y,"50% <- | -> 50%",adj=c(0.5,1),cex=1.5,col="blue")#
     segments(W.50-0.1,0.95*Y, W.50-0.1,0,col="blue")#
     text(352,-0.175*Y,#
       "Reported Weights, US Adults, 2014-2018",#
       adj=c(1,1),cex=1.25)#
   } #
}
getwd()
setwd("/Users/jameshanley/git_repos/statbook/Resources")
ds=read.csv("en_climate_monthly_QC_7027320_1928-2015_P1M.csv")
str(ds)
ds=read.csv("en_climate_monthly_QC_7027320_1928-2015_P1M.csv",#
             as.is=TRUE)#
str(ds)
summary(ds)
ds=ds[ds$Month==12,]
str(ds)
ds=read.csv("en_climate_monthly_QC_7027320_1928-2015_P1M.csv",#
             as.is=TRUE)#
str(ds) #
summary(ds)#
#
ds=ds[ds$Month==12,c("Mean.Max.Temp...C.") ]
summary(ds)
ds=read.csv("en_climate_monthly_QC_7027320_1928-2015_P1M.csv",#
             as.is=TRUE)#
str(ds) #
summary(ds)#
#
ds=ds[ds$Month==12,c("Mean.Max.Temp...C.",#
                     "Mean.Min.Temp...C.",#
                     "Mean.Temp...C.") ]
ds=read.csv("en_climate_monthly_QC_7027320_1928-2015_P1M.csv",#
             as.is=TRUE)#
str(ds) #
summary(ds)#
#
ds=ds[ds$Month==12,c("Year",#
                      "Mean.Max.Temp...C.",#
                     "Mean.Min.Temp...C.",#
                     "Mean.Temp...C.") ]
ds
ds=read.csv("en_climate_monthly_QC_7027320_1928-2015_P1M.csv",#
             as.is=TRUE)#
str(ds) #
summary(ds)#
#
ds=ds[ds$Month==12 & !is.na(ds$Mean.Temp...C.),c("Year",#
                      "Mean.Max.Temp...C.",#
                     "Mean.Min.Temp...C.",#
                     "Mean.Temp...C.") ]
ds
summary(ds)
dim(ds)
plot(ds$Year,ds$Mean.Temp...C.")
plot(ds$Year,ds$Mean.Temp...C.)
ds$Mean.Temp...C.
ds=ds[ds$Month==12 & !is.na(ds$Mean.Temp...C.),c("Year",#
                      "Mean.Max.Temp...C.",#
                     "Mean.Min.Temp...C.",#
                     "Mean.Temp...C.") ]#
dim(ds)#
summary(ds)#
plot(ds$Year,ds$Mean.Temp...C.)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,0))
points(ds$Year,Mean.Min.Temp...C.)
summary(ds)#
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,10))#
points(ds$Year,Mean.Min.Temp...C.)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,10))#
points(ds$Year,Mean.Min.Temp...C.,pch=19)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,10))#
points(ds$Year,ds$Mean.Min.Temp...C.,pch=19)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,10),cex=0.5)#
points(ds$Year,ds$Mean.Min.Temp...C.,pch=19,cex=0.5)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,10),cex=0.5,type="l")
dim(ds)#
summary(ds)#
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,10))#
lines(ds$Year,ds$Mean.Min.Temp...C.,pch=19)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,10),type="l")#
lines(ds$Year,ds$Mean.Min.Temp...C.,pch=19)
summary(ds)#
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,10),type="l")#
lines(ds$Year,ds$Mean.Min.Temp...C.,pch=19)#
lines(ds$Year,ds$Mean.Max.Temp...C.,pch=19)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,5),type="l")#
lines(ds$Year,ds$Mean.Min.Temp...C.,pch=19)#
lines(ds$Year,ds$Mean.Max.Temp...C.,pch=19)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-21,5),type="l")
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,5),type="l")
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,5),type="l")#
lines(ds$Year,ds$Mean.Min.Temp...C.,pch=19)#
lines(ds$Year,ds$Mean.Max.Temp...C.,pch=19)
abline(h=25)
abline(h=-25)
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,5),type="l")#
lines(ds$Year,ds$Mean.Min.Temp...C.,pch=19)#
lines(ds$Year,ds$Mean.Max.Temp...C.,pch=19)#
abline(h = seq(-25,5,5))
summary(ds)#
plot(ds$Year,ds$Mean.Temp...C., ylim=c(-25,5),type="l")#
lines(ds$Year,ds$Mean.Min.Temp...C.,pch=19)#
lines(ds$Year,ds$Mean.Max.Temp...C.,pch=19)#
abline(h = seq(-25,5,5),lwd=0.5,col="blue")
summary( lm(ds$Mean.Temp...C. ~ ds$Year))
summary( lm(ds$Mean.Temp...C. ~ ds$Year-mean(ds$Year)))
ds$Year.c = ds$Year-mean(ds$Year)
summary( lm(ds$Mean.Temp...C. ~ ds$Year.c))
sd(ds$Mean.Temp...C.)
mean(ds$Mean.Temp...C.)
cor(ds)
covar(ds)
cov(ds)
cov(ds[,2:4])
V = cov(ds[,2:4])
str(V)
V[1,1]/4 + V[2,2]/4
cor(ds[,2:4])
cor(ds[,2:3])
( V = cov(ds[,2:4]) )
mean(ds$Mean.Temp...C.)
sd(ds$Mean.Temp...C.)
9*3/7
9*3/5
summary(ds)
path="https://docs.google.com/spreadsheets/d/1nfQuBoAPoPPuXCthfze5XU3dZWw0ugdTrm-0yXL3JXU/edit?usp=sharing"
library(readxl)#
library(xlsx)
library(readxl)
ds=read_xlsx(path)
library(googlesheets)
gs_ls()
path="https://docs.google.com/spreadsheets/d/1nfQuBoAPoPPuXCthfze5XU3dZWw0ugdTrm-0yXL3JXU/edit#gid=0"
library(readxl)
ds=read_xlsx(path)
path='https://docs.google.com/spreadsheets/d/1nfQuBoAPoPPuXCthfze5XU3dZWw0ugdTrm-0yXL3JXU/edit#gid=0'
library(readxl)
ds=read_xlsx(path)
ds=read.xlsx("https://docs.google.com/spreadsheets/d/1lAhFCtGGWJUoFXkXwLe7zyiXM8LRhM-TfgukYVtykuw/export?format=xlsx")
library(readxl)
ds=read.xlsx("https://docs.google.com/spreadsheets/d/1lAhFCtGGWJUoFXkXwLe7zyiXM8LRhM-TfgukYVtykuw/export?format=xlsx")
library(xlsx)
library(xlsx)
dest = .libPaths()[1]
install.packages("xlsx",lib=dest)
library(xlsx)
ds=read.csv("pFile.csv")
str(ds)
ds=read.csv("pFile.csv",as.is=TRUE)
str(ds)
ds#entry.no = (ds$page.no-1.   ) * 200  + #
              (ds$column.no -1) * 100  +#
               ds$row.no
head(ds)
head(ds)
head(ds) ; tail(ds)
ds$entry.no = (ds$page.no-1.   ) * 200  + #
              (ds$column.no -1) * 100  +#
               ds$row.no#
head(ds) ; tail(ds)
ds=read.csv("pFile.csv",as.is=TRUE)#
str(ds)#
ds$CDF =  ( (ds$page.no-1.   ) * 200  + #
            (ds$column.no -1) * 100  +#
               ds$row.no. ) / 241929#
head(ds) ; tail(ds)
ds=read.csv("pFile.csv",as.is=TRUE)#
str(ds)
head(ds) ; tail(ds)
ds$CDF =  ( (ds$page.no-1.   ) * 200  + #
            (ds$column.no -1) * 100  +#
               ds$row.no. )
ds=read.csv("pFile.csv",as.is=TRUE)#
str(ds)#
ds$CDF =  ( (ds$page.no   - 1) * 200  + #
            (ds$column.no - 1) * 100  +#
               ds$row.no. ) / 241929#
head(ds) ; tail(ds)
ds$CDF =  ( (ds$page.no   - 1) * 200  + #
            (ds$column.no - 1) * 100  +#
               ds$row.no. )
head(ds) ; tail(ds)
ds=read.csv("pFile.csv",as.is=TRUE)#
str(ds)#
ds$CDF =  ( (ds$page.no   - 1) * 200  + #
            (ds$column.no - 1) * 100  +#
               ds$row.no ) / 241929#
head(ds) ; tail(ds)
ds$day = (ds$Day -1)   #
#
ds$CDF =  ( (ds$page.no   - 1) * 200  + #
            (ds$column.no - 1) * 100  +#
               ds$row.no ) / 241929#
head(ds) ; tail(ds)
ds$day = (ds$Month + (1/2)*(ds$AMorPM=="PM") +ds$Hour/12
ds$day = (ds$Month-4) + (1/2)*(ds$AMorPM=="PM") +ds$Hour/12
head(ds) ; tail(ds)
ds$AMorPM=="PM"
ds$day = (ds$Month-4) + (1/2)*(ds$AMorPM=="PM") +ds$Hour/12
ds$day
ds$day = (ds$Month-4) + (1/2)*(ds$AMorPM=="PM") +ds$Hour/24
hist(ds$day)
ds$day = (ds$Month-4)*30 + (ds$Day-1) + (1/2)*(ds$AMorPM=="PM") +ds$Hour/24
hist(ds$day)
ds$CDF =  ( (ds$page.no   - 1) * 200  + #
            (ds$column.no - 1) * 100  +#
               ds$row.no ) / 241929#
head(ds) ; tail(ds)
head(ds) ; tail(ds)
plot(ds#day,ds$CDF)
plot(ds$day,ds$CDF)
plot(ds$day,ds$CDF)
plot(ds$day,ds$CDF,type="l")
abline(h=1/2)
L = length(ds$CDF)
L
ds$d = ds$CDF - c(0, ds$CDF[1:(L-1)])
ds$d
ds$d
ds
plot(ds$day, ds$d, type="h" )
abline(v=30)
abline(v=30.1,col="blue")
abline(v=30.1,col="blue",lwd=0.2)
ds
ds=read.csv("pFile.csv",as.is=TRUE)#
str(ds)#
#
ds$day = (ds$Month-4)*30 + (ds$Day-1) + (1/2)*(ds$AMorPM=="PM") +ds$Hour/24#
#
hist(ds$day)   #
#
ds$CDF =  ( (ds$page.no   - 1) * 200  + #
            (ds$column.no - 1) * 100  +#
               ds$row.no ) / 241929#
head(ds) ; tail(ds)#
#
plot(ds$day,ds$CDF,type="l")#
abline(h=1/2)#
#
L = length(ds$CDF)#
#
ds$d = ds$CDF - c(0, ds$CDF[1:(L-1)])#
#
plot(ds$day, ds$d, type="h" )#
abline(v=30.1,col="blue",lwd=0.2)
ds=read.csv("pFile.csv",as.is=TRUE)#
str(ds)#
#
ds$day = (ds$Month-4)*30 + (ds$Day-1) + (1/2)*(ds$AMorPM=="PM") +ds$Hour/24#
#
hist(ds$day)   #
#
ds$CDF =  ( (ds$page.no   - 1) * 200  + #
            (ds$column.no - 1) * 100  +#
               ds$row.no ) / 241929#
head(ds) ; tail(ds)#
#
plot(ds$day,ds$CDF,type="l")#
abline(h=1/2)#
#
L = length(ds$CDF)#
#
ds$d = ds$CDF - c(0, ds$CDF[1:(L-1)])#
#
plot(ds$day, ds$d, type="h" )#
abline(v=30.1,col="blue",lwd=0.2)
plot(ds$day, ds$d, type="l")
plot(ds$day, ds$d, type="h")
plot(ds$day, ds$d, type="h",lwd=2)
plot(ds$day, ds$d, type="h",lwd=3)
plot(ds$day, ds$d, type="h",lwd=4)
plot(ds$day, ds$d, type="h",lwd=3.5)
plot(ds$day, ds$d, type="h",lwd=3)
abline(v=30.1,col="blue",lwd=0.2)
sum(ds$d)
ds$p = ds$CDF - c(0, ds$CDF[1:(L-1)])
plot(ds$day, ds$p, type="h",lwd=3)
sum(ds$p*ds$Day)
# sum(ds$p*ds$d)
sum(ds$p*ds$d)
sum(ds$p*ds$day)
var  = sum(ds$p* (ds$day-mean)^2
var
var  = sum(ds$p* (ds$day-mean)^2 )
var
var  = sum(ds$p* (ds$day-mean)^2 )
(ds$day-mean)^2
mean = sum(ds$p*ds$day)
var  = sum( ds$p * (ds$day-mean)^2 )
var
sd  = sqrt( sum( ds$p * (ds$day-mean)^2 ) )
sd

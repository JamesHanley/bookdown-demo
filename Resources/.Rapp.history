x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), "\n+", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1]),"\n+",toString(delta.mu),"\nif S",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.35,0.65)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j] - 0.03*(j==1)+0.03*(j==2),#
	                        mu[j],PARA[co,j], #
	                        adj=c(1-(j==2),0.5),cex=1.25)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), "+", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1]),"+",toString(delta.mu),"if S",sep=""),2)#
                  ),2,3) ) #
plot3(1)
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), "+", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1]),"+",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j] - 0.03*(j==1)+0.03*(j==2),#
	                        mu[j],PARA[co,j], #
	                        adj=c(1-(j==2),0.5),cex=1.05)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), "+", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1]),"+",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j], mu[j]-0.05,PARA[co,j], #
	                        adj=c(0.5,1),cex=1.05)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j], mu[j]-0.01,PARA[co,j], #
	                        adj=c(0.5,1),cex=1.05,srt=45)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.02*(j==1) + 0.02*(j==2), #
	     	     mu[j] - 0.1 *(j==1) + 0.1 *(j==2),#
	     	     PARA[co,j], #
	                        adj=c(0.5,1),cex=1.05,srt=45)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)#
#
PARA=expression(mu)#
PARAs = c(expression(mu[North]), expression(mu[South]) )#
#
PARAs = c(expression(mu[North]), expression(mu[South]) )#
plot3(1)
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.02*(j==1) + 0.02*(j==2), #
	     	     mu[j] - 0.00*(j==1) + 0.00*(j==2),#
	     	     PARA[co,j], #
	                        adj=c(0.5,1),#
	                        cex=1.05,srt=45)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.02*(j==1) + 0.02*(j==2), #
	     	     mu[j] - 0.00*(j==1) + 0.00*(j==2),#
	     	     PARA[co,j], #
	                        adj=c(1, 1),#
	                        cex=1.05,srt=50)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.00*(j==1) + 0.00*(j==2),#
	     	     PARA[co,j], #
	                        adj=c(1, 1),#
	                        cex=1.05,srt=50)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.00*(j==1) + 0.00*(j==2),#
	     	     PARA[co,j], #
	                        adj=c(1, 0),#
	                        cex=1.05,srt=50)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.00*(j==1) + 0.00*(j==2),#
	     	     PARA[co,j], #
	                        adj=c(1-(j==2), 0),#
	                        cex=1.05,srt=50)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.00*(j==1) + 0.00*(j==2),#
	     	     PARA[co,j], #
	                        adj=c(1-(j==2), 0.5),#
	                        cex=1.05,srt=50)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.00*(j==1) + 0.00*(j==2),#
	     	     PARA[co,j], #
	                        adj=c(0.5, 0.5),#
	                        cex=1.05,srt=50)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.00*(j==1) + 0.00*(j==2),#
	     	     PARA[co,j], #
	                        adj=c(0.5, 0.5),#
	                        cex=1.05,srt=SRT)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
SRT=30                   #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.2,#
	     	     PARA[co,j], #
	                        adj=c(0.5, 0.5),#
	                        cex=1.05,srt=SRT)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
SRT=30                   #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.1,#
	     	     PARA[co,j], #
	                        adj=c(0.5, 0.5),#
	                        cex=1.05,srt=SRT)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
SRT=30                   #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.375,0.625)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.175,#
	     	     PARA[co,j], #
	                        adj=c(0.5, 0.5),#
	                        cex=1.05,srt=SRT)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
SRT=45                   #
plot3(1)
SRT=48                   #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.25,0.75)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.175,#
	     	     PARA[co,j], #
	                        adj=c(0.5, 0.5),#
	                        cex=1.05,srt=SRT)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=2)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
SRT=48                   #
plot3(1)
SRT=40                   #
plot3(1)
SRT=35
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.25,0.75)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.175,#
	     	     PARA[co,j], #
	                        adj=c(0.5, 0.5),#
	                        cex=1.05,srt=SRT)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=1.25)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
SRT=35                  #
plot3(1)
plot3 = function(row){#
     par(mfrow=c(1,3),mar = c(0,0,0,0) )#
     l = 0; r=1#
     TOP="Mean Ocean\ndepth (Km)"#
     x=c(0.25,0.75)#
     mu = c(3.6,4.4)#
     dy= 1#
     for(co in 1:3){#
         plot(x,mu,yaxt="n", xlim=c(0,1),ylim=c(-0.2,ceiling(mu[2])))#
	     text( l,U,PARA,adj=c(0.5,0),cex=2)#
	     for( y in seq(0,ceiling(mu[2]),dy)){#
	     	segments(x[1], y, x[2],y, col="lightblue")#
	     	text(x[1]-0.015, y,toString(y), adj=c(1,0.5))#
	     	text(x[2]+0.015, y,toString(y), adj=c(0,0.5))#
	     } #
	     text(0.5,1.05*ceiling(mu[2]),TOP,adj=c(0.5,0),cex=1.2,font=2) #
	     points(x,mu,pch=19,cex=0.75)#
	     for(j in 1:2){#
	     	text(x[j]  - 0.00*(j==1) + 0.00*(j==2), #
	     	     mu[j] - 0.125,#
	     	     PARA[co,j], #
	                        adj=c(0.5, 0.5),#
	                        cex=1.05,srt=SRT)#
	        text(x[j],-0.15,LABEL[j], adj=c(0.5,1),cex=1.25)#
	     } #
	  }#
}#
#
x=c(0.25,0.75)#
mu = c(3.6,4.4)#
LABEL=c("North", "South")#
delta.mu = mu[2]-mu[1]#
PARA = t(matrix( c( toString(mu[1]), toString(mu[2]),#
                  toString(mu[1]), #
                  paste( toString(mu[1]), " + ", toString(delta.mu),sep=""),#
        rep(paste(toString(mu[1])," + ",toString(delta.mu)," if South",sep=""),2)#
                  ),2,3) ) #
SRT=35                  #
plot3(1)
demo(plotmath)
plot(1:10)
?print
density = c(#
5.50, 5.61, 4.88, 5.07, 5.26, 5.55, 5.36, 5.29, 5.58, 5.65,#
5.57, 5.53, 5.62, 5.29, 5.44, 5.34, 5.79, 5.10, 5.27, 5.39,#
5.42, 5.47, 5.63, 5.34, 5.46, 5.30, 5.75, 5.68, 5.85)#
#
round(mean(density),2)#
#
lm.fit =  lm(density ~ 1)#
print(summary(lm.fit),digits=1)
library(mosaic)
bootstrap.means <- do(500) * lm( resample(density) ~1)
bootstrap.means
bootstrap.means <- do(1000) * lm( resample(density) ~1)
confint(bootstrap.means)
bootstrap.fits <- do(1000) * lm( resample(density) ~1)
confint(bootstrap.fits$Intercept)
round(confint(bootstrap.fits$Intercept),2)
round(sd(bootstrap.fits$Intercept),2)
print(summary(lm.fit),digits=1)
?confint
fit <- lm(100/mpg ~ disp + hp + wt + am, data = mtcars)#
confint(fit)#
confint(fit, "wt")
possible.n = c(1,2,3,4,8)#
Errors =list(e2 = c(-1,1) ,    #
             e3 = sqrt(3/2)*c(-1,0,1), #
             e4 = sqrt(1/2)*c(-1,0,0,1)#
             )#
max.e = max()*max(abs(unlist(Errors))
possible.n = c(1,2,3,4,8)#
Errors =list(e2 = c(-1,1) ,    #
             e3 = sqrt(3/2)*c(-1,0,1), #
             e4 = sqrt(1/2)*c(-1,0,0,1)#
             )#
max.e = max(possible.n)*max(abs(unlist(Errors))
possible.n = c(1,2,3,4,8)#
Errors =list(e2 = c(-1,1) ,    #
             e3 = sqrt(3/2)*c(-1,0,1), #
             e4 = sqrt(1/2)*c(-1,0,0,1)#
             )
max(possible.n)
max(abs(unlist(Errors))
max.e = max(possible.n) * max(abs(unlist(Errors)))
max.e
max.e = max(possible.n) * max(abs(unlist(Errors)))
max.e
possible.n = c(1,2,3,4,8)#
Errors =list(e2 = c(-1,1) ,    #
             e3 = sqrt(3/2)*c(-1,0,1), #
             e4 = sqrt(1/2)*c(-1,0,0,1)#
             )#
#
n.sampled.possibilities = 10000#
#
nr = length(possible.n)#
nc = length(Errors)#
par(mfrow=c(nr,nc),mar = c(1,1,1,1) )#
#
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(100,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = max(possible.n) * max(abs(unlist(errors)))#
#
    XLIM=100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=XLIM,#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in XLIM[1]:XLIM[2] ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
nc = length(Errors)#
par(mfrow=c(nr,nc),mar = c(1,1,1,1) )#
#
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(100,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 10#
#
    XLIM=100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=XLIM,#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in XLIM[1]:XLIM[2] ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
nr = length(possible.n)#
nc = length(Errors)#
par(mfrow=c(nr,nc),mar = c(1,1,1,1) )#
#
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(100,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 10#
#
    XLIM=100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=XLIM,#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1]mXLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(100,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 10#
#
    XLIM=100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=XLIM,#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(100,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=XLIM,#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=XLIM,#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e-8,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=XLIM,#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-2,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
      text(l,0,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
      text(l,0,toString(round(l/n,1)),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
      text(l,-dy,toString(round(l/n,1)),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(m in (XLIM[1]/n):(XLIM[2]/n) ){#
      text(n*m,-dy,toString(m),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(m in seq(92,108,2) ){#
      text(n*m,-dy,toString(m),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(l in seq(XLIM[1],XLIM[2],n) ){#
      text(l,-dy,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(l in seq(XLIM[1],XLIM[2],n) ){#
      text(l,-dy,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,-dy,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(pct in seq(0,50,10)){#
    	text(XLIM[1],n.sampled.possibilities*pct/100,toString(pct),adj=c(1,0.5))#
    }#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(l in seq(XLIM[1],XLIM[2],n) ){#
      text(l,-dy,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,-dy,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    for(pct in seq(0,50,10)){#
    	text(XLIM[1],n.sampled.possibilities*pct/100,#
    	         paste(toString(pct),"%",sep=""),adj=c(1,0.5),cex=0.7)#
    }#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(l in seq(XLIM[1],XLIM[2],n) ){#
      text(l,-dy,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,-dy,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    segments(XLIM[1],0,XLIM[1],XLIM[1],sampled.possibilities/0.95)#
    for(pct in seq(10,50,10)){#
    	text(XLIM[1],n.sampled.possibilities*pct/100,#
    	         paste(toString(pct),"%",sep=""),adj=c(1,0.5),cex=0.7)#
    }#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(l in seq(XLIM[1],XLIM[2],n) ){#
      text(l,-dy,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,-dy,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
segments(XLIM[1],0,XLIM[1],sampled.possibilities/0.95)
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    segments(XLIM[1],0,XLIM[1],sampled.possibilities/0.95)#
    for(pct in seq(10,50,10)){#
    	text(XLIM[1],n.sampled.possibilities*pct/100,#
    	         paste(toString(pct),"%",sep=""),adj=c(1,0.5),cex=0.7)#
    }#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(l in seq(XLIM[1],XLIM[2],n) ){#
      text(l,-dy,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,-dy,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    segments(XLIM[1],0,XLIM[1],n.sampled.possibilities/1.95)#
    for(pct in seq(10,50,10)){#
    	text(XLIM[1],n.sampled.possibilities*pct/100,#
    	         paste(toString(pct),"%",sep=""),adj=c(1,0.5),cex=0.7)#
    }#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(l in seq(XLIM[1],XLIM[2],n) ){#
      text(l,-dy,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,-dy,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
possible.n = c(1,2,3,4,8)#
Errors =list(e2 = c(-1,1) ,    #
             e3 = sqrt(3/2)*c(-1,0,1), #
             e4 = sqrt(1/2)*c(-1,0,0,1)#
             )#
#
n.sampled.possibilities = 1000#
#
nr = length(possible.n)#
nc = length(Errors)#
par(mfrow=c(nr,nc),mar = c(1,1,1,1) )#
#
for(r in 1:nr){#
  for(c in 1:nc){#
    errors = Errors[[c]]#
    n = possible.n[r]#
    lengths = rep(0,n.sampled.possibilities)#
    for (i in 1:n) {#
      lengths = lengths + 100 +#
                sample(errors,n.sampled.possibilities,#
                          replace=TRUE)#
    }#
    f = table(lengths)#
    max.e = 8#
#
    XLIM=n*100 + c(-max.e,max.e)#
    plot(f,yaxt="n", xaxt="n",#
         xlim=c(XLIM[1]-4,XLIM[2]),#
         ylim=c(-0.25,1/1.8)*n.sampled.possibilities,#
         main=toString(n))#
    segments(XLIM[1], 0, XLIM[2], 0)#
    segments(XLIM[1],0,XLIM[1],n.sampled.possibilities/1.95)#
    for(pct in seq(10,50,10)){#
    	text(XLIM[1],n.sampled.possibilities*pct/100,#
    	         paste(toString(pct),"%",sep=""),adj=c(1,0.5),cex=0.7)#
    }#
    dy = n.sampled.possibilities/8#
    for(l in seq(XLIM[1],XLIM[2],2) ){#
      text(l,0,toString(l),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,0,"Sum:",cex=1,adj=c(0.5,1.25))#
    }#
    for(l in seq(XLIM[1],XLIM[2],n) ){#
      text(l,-dy,toString(l/n),cex=1,adj=c(0.5,1.25))#
      if(l == XLIM[1]) text(XLIM[1]-2,-dy,"mean:",cex=1,adj=c(0.5,1.25))#
    }#
  }#
}
?sample
?apply
?sample
?message
qnorm(1/10^6)
ds = read.table("http://www.biostat.mcgill.ca/hanley/statbook/weightsEtc.txt")#
#
MEAN=round(weighted.mean(ds$Weight.lbs,w=ds$Freq))#
#
VAR = sum( ds$Freq * (ds$Weight.lbs-MEAN)^2 ) / sum(ds$Freq)#
#
SD = sqrt(VAR)#
#
WEIGHTS = sort(unique(ds$Weight.lbs))#
Freq = aggregate(ds$Freq,by=list(ds$Weight.lbs),sum)$x#
Proportions = Freq/sum(Freq)#
#
W.50 = WEIGHTS[min(which(cumsum(Proportions) > 0.50))]#
mu = sum(WEIGHTS*Proportions)
WEIGHTS = sort(unique(ds$Weight.lbs))#
Freq = aggregate(ds$Freq,by=list(ds$Weight.lbs,ds$Sex),sum)$x
Freq
Freq = aggregate(ds$Freq,by=list(ds$Weight.lbs,ds$Sex),sum)$x
Freq
str(ds)
Freq = aggregate(ds$Freq,by=list(ds$Weight.lbs,ds$Sex),sum)
Freq
Freq = aggregate(ds$Freq,by=list(ds$Sex,,ds$Weight.lbs),sum)
Freq
Freq = aggregate(ds$Freq,by=list(ds$Sex,ds$Weight.lbs),sum)
Freq
ds = read.table("http://www.biostat.mcgill.ca/hanley/statbook/weightsEtc.txt")
ds
sum(ds$Freq)
Freq = aggregate(ds$Freq,by=list(sex=ds$Sex,bin=ds$Weight.lbs),sum)
Freq
ds$Sex
Freq = aggregate(ds$Freq,by=list(sex=ds$Sex,w=ds$Weight.lbs),sum)
table(ds$Weight.lbs,ds$Sex)
setwd("/Users/jameshanley/git_repos/statbook/Resources")#
#
library(ipumsr)#
ddi <- read_ipums_ddi("nhis_00009.xml")#
ds <- read_ipums_micro(ddi)#
str(ds)#
table(ds$WEIGHT)#
table(ds$HEIGHT)#
table(ds$SEX)#
ds=ds[ds$AGE    >= 18 & #
      ds$WEIGHT >  100 &#
      ds$WEIGHT <  300  &#
      ds$HEIGHT >=  59 &#
      ds$HEIGHT <=  75, 17:20] #
ds$WEIGHT = 10*ceiling(ds$WEIGHT/10)#
fr=table(ds$WEIGHT,ds$HEIGHT,ds$SEX)#
str(fr)#
options(stringsAsFactors =FALSE)#
#
ds = data.frame(fr)#
ds[,1] = as.numeric(levels(ds[,1]))#
ds[,2] = as.numeric(levels(ds[,2]))#
ds[,3] = as.numeric(levels(ds[,3]))
setwd("/Users/jameshanley/git_repos/statbook/Resources")#
#
library(ipumsr)#
ddi <- read_ipums_ddi("nhis_00009.xml")#
ds <- read_ipums_micro(ddi)#
str(ds)#
table(ds$WEIGHT)#
table(ds$HEIGHT)#
table(ds$SEX)#
ds=ds[ds$AGE    >= 18 & #
      ds$WEIGHT >  100 &#
      ds$WEIGHT <  300  &#
      ds$HEIGHT >=  59 &#
      ds$HEIGHT <=  75, 17:20] #
ds$WEIGHT = 10*ceiling(ds$WEIGHT/10)#
fr=table(ds$WEIGHT,ds$HEIGHT,ds$SEX)
str(fr)
ds = data.frame(fr)#
ds[,1] = as.numeric(levels(ds[,1]))#
ds[,2] = as.numeric(levels(ds[,2]))#
ds[,3] = as.numeric(levels(ds[,3]))
str(ds)
fr
ds = data.frame(fr)
ds
aggregate(ds$Freq,by=list(w=ds$Weight.lbs,sex=ds$Sex),sum)
ds$Freq
aggregate(ds$Freq,by=list(w=ds$Weight.lbs,sex=ds$Sex), sum)
ds = data.frame(fr)#
ds[,1] = as.numeric(levels(ds[,1]))#
ds[,2] = as.numeric(levels(ds[,2]))#
ds[,3] = as.numeric(levels(ds[,3]))#
names(ds)[1:3]=c("Weight.lbs","Height.ins","Sex")#
head(ds)#
str(ds)
library(ipumsr)#
ddi <- read_ipums_ddi("nhis_00009.xml")#
ds <- read_ipums_micro(ddi)#
str(ds)#
table(ds$WEIGHT)#
table(ds$HEIGHT)#
table(ds$SEX)#
ds=ds[ds$AGE    >= 18 & #
      ds$WEIGHT >  100 &#
      ds$WEIGHT <  300  &#
      ds$HEIGHT >=  59 &#
      ds$HEIGHT <=  75, 17:20] #
ds$WEIGHT = 10*ceiling(ds$WEIGHT/10)#
fr=table(ds$WEIGHT,ds$HEIGHT,ds$SEX)#
str(fr)#
options(stringsAsFactors =FALSE)#
#
ds = data.frame(fr)
ds
str(ds)
levels(ds[,1])
ds[,1] = as.numeric(ds[,1][levels(ds[,1])])
ds
ds = data.frame(fr)#
str(ds)#
ds[,1] = as.numeric(ds[,1][levels(ds[,1])])#
ds[,2] = as.numeric(ds[,2][levels(ds[,2])])#
ds[,3] = as.numeric(ds[,3][levels(ds[,3])])
names(ds)[1:3]=c("Weight.lbs","Height.ins","Sex")
head(ds)
str(ds)
aggregate(ds$Freq,by=list(w=ds$Weight.lbs,sex=ds$Sex), sum)
str(fr)
options(stringsAsFactors =FALSE)
str(fr)
ds = as.data.frame(fr)
str(ds)
str(fr)
# dim(fr)
dim(fr)
ds = as.data.frame(fr,stringsAsFactors =FALSE)
str(ds)
ds[,1] = as.numeric(ds[,1])
ds = as.data.frame(fr,stringsAsFactors =FALSE)#
str(ds)#
ds[,1] = as.numeric(ds[,1])#
ds[,2] = as.numeric(ds[,2])#
ds[,3] = as.numeric(ds[,3])#
names(ds)[1:3]=c("Weight.lbs","Height.ins","Sex")#
head(ds)#
str(ds)
aggregate(ds$Freq,by=list(w=ds$Weight.lbs,sex=ds$Sex), sum)
ds=aggregate(ds$Freq,by=list(w=ds$Weight.lbs,sex=ds$Sex), sum)
ds
ds=aggregate(ds$Freq,by=list(ds$Weight.lbs,sex=ds$Sex), sum)
ds = as.data.frame(fr,stringsAsFactors =FALSE)#
str(ds)#
ds[,1] = as.numeric(ds[,1])#
ds[,2] = as.numeric(ds[,2])#
ds[,3] = as.numeric(ds[,3])#
names(ds)[1:3]=c("Weight.lbs","Height.ins","Sex")#
head(ds)#
str(ds)
ds=aggregate(ds$Freq,by=list(ds$Weight.lbs,sex=ds$Sex), sum)
ds
ds = as.data.frame(fr,stringsAsFactors =FALSE)#
str(ds)#
ds[,1] = as.numeric(ds[,1])#
ds[,2] = as.numeric(ds[,2])#
ds[,3] = as.numeric(ds[,3])#
names(ds)[1:3]=c("Weight.lbs","Height.ins","Sex")#
head(ds)#
str(ds)
ds
str(ds)
ds = as.data.frame(fr,stringsAsFactors =FALSE)
str(ds)
library(ipumsr)#
ddi <- read_ipums_ddi("nhis_00009.xml")#
ds <- read_ipums_micro(ddi)#
str(ds)#
table(ds$WEIGHT)#
table(ds$HEIGHT)#
table(ds$SEX)#
ds=ds[ds$AGE    >= 18 & #
      ds$WEIGHT >  100 &#
      ds$WEIGHT <  300  &#
      ds$HEIGHT >=  59 &#
      ds$HEIGHT <=  75, 17:20] #
ds$WEIGHT = 10*ceiling(ds$WEIGHT/10)#
fr=table(ds$WEIGHT,ds$HEIGHT,ds$SEX)#
str(fr)#
dim(fr)#
#
ds = as.data.frame(fr,stringsAsFactors =FALSE)#
ds[,1] = as.numeric(ds[,1])#
ds[,2] = as.numeric(ds[,2])#
ds[,3] = as.numeric(ds[,3])#
str(ds)
names(ds)[1:3]=c("Weight.lbs","Height.ins","Sex")
head(ds)
str(ds)
head(ds)
write.table(ds,"weightsEtc.txt")
ds = read.table("http://www.biostat.mcgill.ca/hanley/statbook/weightsEtc.txt")#
#
MEAN=round(weighted.mean(ds$Weight.lbs,w=ds$Freq))#
#
VAR = sum( ds$Freq * (ds$Weight.lbs-MEAN)^2 ) / sum(ds$Freq)#
#
SD = sqrt(VAR)
SD
WEIGHTS = sort(unique(ds$Weight.lbs))#
Freq = aggregate(ds$Freq,by=list(ds$Weight.lbs),sum)$x#
Proportions = Freq/sum(Freq)#
#
W.50 = WEIGHTS[min(which(cumsum(Proportions) > 0.50))]#
mu = sum(WEIGHTS*Proportions)
no.of.sims = 10000 ;  # no. of samples of each size#
                      # enough to generate relatively smooth histograms  #
sample.sizes = c(1,2,4,8,16) ; #
#
par(mfrow=c(length(sample.sizes),1),mar = c(0.5,1,0.5,1) )#
#
for (n in sample.sizes ){        # loop over the various sample sizes#
   weights = matrix(sample(WEIGHTS,    # 1 row per simulation#
              size = n*no.of.sims,     # to save time, do all at once#
              replace = TRUE,          # only because data compressed#
              prob = Proportions),     # = FALSE if has indiv. data#
          nrow = no.of.sims, ncol=n) # put into rows / columns#
   if(n > 1 & n <= 10){#
     print( noquote(#
      paste("Weights (lbs) of sampled persons in first 2 samples of size",  #
            toString(n)) )   ) #
     print(head(weights,2))#
   }#
   if( n == max(sample.sizes) ){#
     cat("The first panel shows the weight-distribution of the entire population.\n")#
     cat("The remaining ones show the  distributions of the sample sums and means.\n")#
     message("test")#
   } #
   # compute the row-specific (simulation-specific) sums and means#
   # apply sum/mean to MARGIN=1, i.e., to each simulation (each row)#
#
   sums.samples.of.size.n = apply(weights,MARGIN=1,FUN=sum)#
   means.samples.of.size.n = apply(weights,MARGIN=1,FUN=mean)#
#
   fr = table(sums.samples.of.size.n)          # fr = frequency#
   Y = max(Proportions*no.of.sims)/sqrt(0.75*n) # scale the y axis#
   plot(fr,lw=0.4,xlim=c(n*100,n*(max(WEIGHTS)+50) ), #
                  ylim=c(-0.25,1)*Y, xaxt="n")#
   text(n*320,0.55*Y,paste("n =",toString(n)),cex=2,font=3,adj=c(0,1))#
   for(w in seq(100,300,20)) {#
     text(n*w, -0.01*Y, toString(n*w),adj=c(0.5,1),cex=1.5)#
     txts = paste("Sum of",toString(n),"Weights")#
     if(n==1) txts = "Individual Weights"#
     if(w==300 ) text(n*310, -0.01*Y,#
          txts,adj=c(0,1),cex=1.5)#
     if(n > 1) text(n*w, -0.15*Y, toString(w),adj=c(0.5,1),font=4,cex=1.5)#
     if(w==300 & n > 1) text(n*310, -0.15*Y,#
          paste("Mean of",toString(n)," Weights"),adj=c(0,1),font=4,cex=1.5)#
   }#
   # how big is the spread (sd) of the simulated sums and means ?#
   sd.sums  = round( sd(sums.samples.of.size.n), 1 )#
   sd.means = round( sd(means.samples.of.size.n),1 )#
   txt.s = paste( "SD of Sum:", toString(sd.sums) )#
   if(n==1) txt.s = paste("SD of Individual Weights:",toString(sd.sums),"(lbs)" )#
   txt.m = paste("\n\n  SD of Mean:",toString(sd.means))#
   if(n==1) txt.m = "\n\n "#
   text(n*mu +  sd.sums,Y*0.7,#
        paste(txt.s,txt.m), cex=1.5,adj=c(0,0.5) )#
   points(n*mu,0,pch=19,col="red",cex=1.5)#
   if(n==1){#
     text(W.50-1,0.95*Y,"50% <- | -> 50%",adj=c(0.5,1),cex=1.5,col="blue")#
     segments(W.50-0.1,0.95*Y, W.50-0.1,0,col="blue")#
     text(352,-0.175*Y,#
       "Reported Weights, US Adults, 2014-2018",#
       adj=c(1,1),cex=1.25)#
   } #
}
WEIGHTS = sort(unique(ds$Weight.lbs))#
table(ds$Weight.lbs,ds$Sex)
Freq = aggregate(ds$Freq,by=list(sex=ds$Sex,w=ds$Weight.lbs),sum)
Freq
?by
by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
fr = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
str(fr)
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
Freq
str(proportions)
Proportions = Freq
str(proportions)
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
Proportions = Freq
str(proportions)
str(Proportions)
apply(Freq,1,sum)
apply(Freq,2,sum)
dim(Freq)
totals = matrix(apply(Freq,2,sum),dim(Freq))
totals
totals = matrix(apply(Freq,2,sum),dim(Freq)[1],dim(Freq)[2])
totals
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
Freq
apply(Freq,2,sum)
rep(apply(Freq,2,sum), dim(Freq)[1])
rep(apply(Freq,2,sum), each=dim(Freq)[1])
matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[1],dim(Freq)[2])
Freq / totals
Freq / totals
Freq = Freq / totals
Freq
Proportions = Freq / totals
Proportions = Freq / totals
str(Proportions)
apply(Proportions,2,sum)
apply(Proportions,1,sum)
totals = matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[2],dim(Freq)[1])
Proportions = Freq / totals
str(Proportions)
totals = matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[1],dim(Freq)[2])
totals
as.matrix(Freq)
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)
Freq = matrix( Freq,dim(Freq)[1],dim(Freq)[2])
Freq
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)#
totals = matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[1],dim(Freq)[2])#
Freq = matrix( Freq,dim(Freq)[1],dim(Freq)[2])#
Proportions = Freq / totals#
str(Proportions)
apply(Proportions,2,sum)
Proportions
apply(Proportions,2,sum)
no.of.sims = 10000
sex = sample[c(1,2),no.of.sims,replace=TRUE)
sex = sample(c(1,2),no.of.sims,replace=TRUE)
sex
WEIGHTS = sort(unique(ds$Weight.lbs))
WEIGHTS
no.of.sims = 10000 ;  # no. of samples of each size#
                      # enough to generate relatively smooth histograms  #
sample.sizes = c(1,2,4,8,16) ;
n=5
sex = sample(c(1,2),no.of.sims,replace=TRUE)
weights = matrix(sample(WEIGHTS,      # 1 row per simulation#
              size = n*no.of.sims,       # to save time, do all at once#
              replace = TRUE,            # only because data compressed#
              prob = Proportions[,sex]), # = FALSE if has indiv. data#
          nrow = no.of.sims, ncol=n) # put into rows / columns
sex
Proportions[,sex]
?rbinom
totals
apply(Freq,2,sum)
Freq = by(ds$Freq,list(ds$Weight.lbs,ds$Sex),sum)#
totals = matrix( rep(apply(Freq,2,sum), each=dim(Freq)[1]) ,dim(Freq)[1],dim(Freq)[2])#
Freq = matrix( Freq,dim(Freq)[1],dim(Freq)[2])#
Proportions = Freq / totals#
WEIGHTS = sort(unique(ds$Weight.lbs))#
#
apply(Freq,2,sum)
n.each = apply(Freq,2,sum)
?rbinom
n.each = apply(Freq,2,sum)
p.each = n.each / sum(n.each)
p.each
no.of.sims
s1 = rbinom(1,no.of.sims,prob=p.each[1])
s1 = rbinom(1,no.of.sims,prob=p.each[1])
s1
Proportions[,1]
weights = matrix(NA,nrow = no.of.sims, ncol=n)
n
s1 = rbinom(1,no.of.sims,prob=p.each[1])
weights = matrix(sample(WEIGHTS,      # 1 row per simulation#
              size    = n*s1,            # to save time, do all at once#
              replace = TRUE,            # only because data compressed#
              prob = Proportions[,1]),   # = FALSE if has indiv. data#
             nrow = s1, ncol=n)
weights
w1      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s1,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,1]),   # = FALSE if has indiv. data#
             nrow = s1, ncol=n)
w2      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s2,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,1]),   # = FALSE if has indiv. data#
             nrow = s2, ncol=n)          # put into rows / columns
s1
s2
s2 = no.of.sims - s1
s2
w2      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s2,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,2]),   # = FALSE if has indiv. data#
             nrow = s2, ncol=n)
weights = rbind(w1,w2)
str(weights)
no.of.sims = 1000 ;  # no. of samples of each size#
                      # enough to generate relatively smooth histograms  #
sample.sizes = c(1,2,4,8,16) ; #
#
par(mfrow=c(length(sample.sizes),1),mar = c(0.5,1,0.5,1) )#
#
for (n in sample.sizes ){        # loop over the various sample sizes#
   s1 = rbinom(1,no.of.sims,prob=p.each[1])#
   w1      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s1,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,1]),   # = FALSE if has indiv. data#
             nrow = s1, ncol=n)          # put into rows / columns#
   s2 = no.of.sims - s1#
   w2      = matrix(sample(WEIGHTS,      # 1 row per simulation#
               size    = n*s2,            # to save time, do all at once#
               replace = TRUE,            # only because data compressed#
               prob = Proportions[,2]),   # = FALSE if has indiv. data#
             nrow = s2, ncol=n)          # put into rows / columns#
   weights = rbind(w1,w2)#
   str(weights)     #
   if(n > 1 & n <= 10){#
     print( noquote(#
      paste("Weights (lbs) of sampled persons in first 2 samples of size",  #
            toString(n)) )   ) #
     print(head(weights,2))#
   }#
   if( n == max(sample.sizes) ){#
     cat("The first panel shows the weight-distribution of the entire population.\n")#
     cat("The remaining ones show the  distributions of the sample sums and means.\n")#
     message("test")#
   } #
   # compute the row-specific (simulation-specific) sums and means#
   # apply sum/mean to MARGIN=1, i.e., to each simulation (each row)#
#
   sums.samples.of.size.n = apply(weights,MARGIN=1,FUN=sum)#
   means.samples.of.size.n = apply(weights,MARGIN=1,FUN=mean)#
#
   fr = table(sums.samples.of.size.n)          # fr = frequency#
   Y = max(Proportions*no.of.sims)/sqrt(0.75*n) # scale the y axis#
   plot(fr,lw=0.4,xlim=c(n*100,n*(max(WEIGHTS)+50) ), #
                  ylim=c(-0.25,1)*Y, xaxt="n")#
   text(n*320,0.55*Y,paste("n =",toString(n)),cex=2,font=3,adj=c(0,1))#
   for(w in seq(100,300,20)) {#
     text(n*w, -0.01*Y, toString(n*w),adj=c(0.5,1),cex=1.5)#
     txts = paste("Sum of",toString(n),"Weights")#
     if(n==1) txts = "Individual Weights"#
     if(w==300 ) text(n*310, -0.01*Y,#
          txts,adj=c(0,1),cex=1.5)#
     if(n > 1) text(n*w, -0.15*Y, toString(w),adj=c(0.5,1),font=4,cex=1.5)#
     if(w==300 & n > 1) text(n*310, -0.15*Y,#
          paste("Mean of",toString(n)," Weights"),adj=c(0,1),font=4,cex=1.5)#
   }#
   # how big is the spread (sd) of the simulated sums and means ?#
   sd.sums  = round( sd(sums.samples.of.size.n), 1 )#
   sd.means = round( sd(means.samples.of.size.n),1 )#
   txt.s = paste( "SD of Sum:", toString(sd.sums) )#
   if(n==1) txt.s = paste("SD of Individual Weights:",toString(sd.sums),"(lbs)" )#
   txt.m = paste("\n\n  SD of Mean:",toString(sd.means))#
   if(n==1) txt.m = "\n\n "#
   text(n*mu +  sd.sums,Y*0.7,#
        paste(txt.s,txt.m), cex=1.5,adj=c(0,0.5) )#
   points(n*mu,0,pch=19,col="red",cex=1.5)#
   if(n==1){#
     text(W.50-1,0.95*Y,"50% <- | -> 50%",adj=c(0.5,1),cex=1.5,col="blue")#
     segments(W.50-0.1,0.95*Y, W.50-0.1,0,col="blue")#
     text(352,-0.175*Y,#
       "Reported Weights, US Adults, 2014-2018",#
       adj=c(1,1),cex=1.25)#
   } #
}
